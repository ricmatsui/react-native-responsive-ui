{"version":3,"sources":["MediaQuery.tsx"],"names":["PixelRatio","Platform","useDimensions","isInInterval","value","min","max","undefined","mediaQuery","width","height","minWidth","maxWidth","minHeight","maxHeight","minAspectRatio","maxAspectRatio","orientation","platform","minPixelRatio","maxPixelRatio","condition","currentOrientation","get","OS","children","props","val"],"mappings":"qFACA,OAASA,UAAT,CAAqBC,QAArB,KAAqC,cAArC,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CAkBA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAC1BC,KAD0B,CAE1BC,GAF0B,CAG1BC,GAH0B,QAK1B,CAACD,GAAG,GAAKE,SAAR,EAAqBH,KAAK,EAAIC,GAA/B,IAAwCC,GAAG,GAAKC,SAAR,EAAqBH,KAAK,EAAIE,GAAtE,CAL0B,EAArB,CAOP,MAAO,IAAME,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,MAcxBC,KAdwB,CAexBC,MAfwB,CAgBZ,IAdVC,CAAAA,QAcU,MAdVA,QAcU,CAbVC,QAaU,MAbVA,QAaU,CAZVC,SAYU,MAZVA,SAYU,CAXVC,SAWU,MAXVA,SAWU,CAVVC,cAUU,MAVVA,cAUU,CATVC,cASU,MATVA,cASU,CARVC,WAQU,MARVA,WAQU,CAPVC,QAOU,MAPVA,QAOU,CANVC,aAMU,MANVA,aAMU,CALVC,aAKU,MALVA,aAKU,CAJVC,SAIU,MAJVA,SAIU,CACZ,GAAMC,CAAAA,kBAA+B,CACnCb,KAAK,CAAGC,MAAR,CAAiB,WAAjB,CAA+B,UADjC,CAEA,MACEP,CAAAA,YAAY,CAACM,KAAD,CAAQE,QAAR,CAAkBC,QAAlB,CAAZ,EACAT,YAAY,CAACO,MAAD,CAASG,SAAT,CAAoBC,SAApB,CADZ,EAEAX,YAAY,CAACM,KAAK,CAAGC,MAAT,CAAiBK,cAAjB,CAAiCC,cAAjC,CAFZ,EAGAb,YAAY,CAACH,UAAU,CAACuB,GAAX,EAAD,CAAmBJ,aAAnB,CAAkCC,aAAlC,CAHZ,GAICH,WAAW,GAAKV,SAAhB,EAA6BU,WAAW,GAAKK,kBAJ9C,IAKCJ,QAAQ,GAAKX,SAAb,EAA0BW,QAAQ,GAAKjB,QAAQ,CAACuB,EALjD,IAMCH,SAAS,GAAKd,SAAd,EAA2Bc,SAN5B,CADF,CASD,CA5BM,CAkCP,eAAe,eAA8D,IAA3DI,CAAAA,QAA2D,OAA3DA,QAA2D,CAA9CC,KAA8C,iEACjDxB,aAAa,EADoC,CACnEO,KADmE,gBACnEA,KADmE,CAC5DC,MAD4D,gBAC5DA,MAD4D,CAE3E,GAAMiB,CAAAA,GAAG,CAAGnB,UAAU,CAACkB,KAAD,CAAQjB,KAAR,CAAeC,MAAf,CAAtB,CACA,GAAIiB,GAAJ,CAAS,CACP,MAAOF,CAAAA,QAAP,CACD,CACD,MAAO,KAAP,CACD,CAPD","sourcesContent":["import React from \"react\";\nimport { PixelRatio, Platform } from \"react-native\";\nimport useDimensions from \"./useDimensions\";\n\ntype Orientation = \"landscape\" | \"portrait\";\n\nexport interface MediaQuery {\n  minHeight?: number;\n  maxHeight?: number;\n  minWidth?: number;\n  maxWidth?: number;\n  minAspectRatio?: number;\n  maxAspectRatio?: number;\n  minPixelRatio?: number;\n  maxPixelRatio?: number;\n  orientation?: Orientation;\n  condition?: boolean;\n  platform?: string;\n}\n\nexport const isInInterval = (\n  value: number,\n  min?: number,\n  max?: number\n): boolean =>\n  (min === undefined || value >= min) && (max === undefined || value <= max);\n\nexport const mediaQuery = (\n  {\n    minWidth,\n    maxWidth,\n    minHeight,\n    maxHeight,\n    minAspectRatio,\n    maxAspectRatio,\n    orientation,\n    platform,\n    minPixelRatio,\n    maxPixelRatio,\n    condition\n  }: MediaQuery,\n  width: number,\n  height: number\n): boolean => {\n  const currentOrientation: Orientation =\n    width > height ? \"landscape\" : \"portrait\";\n  return (\n    isInInterval(width, minWidth, maxWidth) &&\n    isInInterval(height, minHeight, maxHeight) &&\n    isInInterval(width / height, minAspectRatio, maxAspectRatio) &&\n    isInInterval(PixelRatio.get(), minPixelRatio, maxPixelRatio) &&\n    (orientation === undefined || orientation === currentOrientation) &&\n    (platform === undefined || platform === Platform.OS) &&\n    (condition === undefined || condition)\n  );\n};\n\ninterface MediaQueryProps extends MediaQuery {\n  children: React.ReactNode;\n}\n\nexport default ({ children, ...props }: MediaQueryProps): React.ReactNode => {\n  const { width, height } = useDimensions();\n  const val = mediaQuery(props, width, height);\n  if (val) {\n    return children;\n  }\n  return null;\n};\n"]}